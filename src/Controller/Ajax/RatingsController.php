<?php
/**
 * Created by PhpStorm.
 * User: finleysiebert
 * Date: 18-02-18
 * Time: 21:14
 */

namespace App\Controller\Ajax;


use App\Controller\AppController;
use App\Model\Table\RatingsTable;
use Cake\Error\FatalErrorException;
use Cake\Event\Event;
use Cake\I18n\Number;
use Cake\Network\Exception\NotAcceptableException;

/**
 * @property RatingsTable Ratings
 */
class RatingsController extends AppController
{
    public function initialize()
    {
        parent::initialize(); // TODO: Change the autogenerated stub
        $this->loadComponent('RequestHandler');
    }

    public function beforeFilter(Event $event)
    {
        $this->Auth->allow(['ratings']);
        return parent::beforeFilter($event); // TODO: Change the autogenerated stub
    }

    public function rate() {

        if($this->request->is('ajax') && $this->request->is('post')) {

            $post = $this->Ratings->Posts->get($this->request->getData()['post-id']);

            $checkRating = $this->Ratings->find('all')
                ->where([
                    'user_id' => $this->Auth->user('id'),
                    'post_id' => $post->id
                ])->count();

            if($checkRating > 0) {
                throw new NotAcceptableException(__('You have already rated this post'));
            }

            $rating = $this->Ratings->newEntity();
            $rating->post_id = $post->id;
            $rating->user_id = $this->Auth->user('id');
            $rating->type = strtoupper(h($this->request->getData()['type']));

            if($this->Ratings->save($rating)) {

                $ratings = $this->Ratings->findByPostId($post->id);

                $yays = Number::format($ratings->where(['type' => 'YAY'])->count());
                $nays = Number::format($ratings->where(['type' => 'NAY'])->count());

                $response = [
                    'yays' => $yays,
                    'nays' => $nays
                ];
            }
            else
            {
                throw new FatalErrorException(__('Rating could not be saved'));
            }

        }

        $this->set(compact('response'));
        $this->set('_serialize', ['response']);

    }

    public function ratings($postId) {

        if($this->request->is('ajax')) {

            $ratings = $this->Ratings->findByPostId($postId);

            $yays = Number::format($ratings->where(['type' => 'YAY'])->count());
            $nays = Number::format($ratings->where(['type' => 'NAY'])->count());

            $response = [
                'yays' => $yays,
                'nays' => $nays
            ];
        }

        $this->set(compact('response'));
        $this->set('_serialize', ['response']);

    }
}